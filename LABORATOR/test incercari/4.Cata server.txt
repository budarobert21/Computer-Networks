#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdlib.h>
#include <signal.h>

int main(int argc, char** argv){
int s,c,l;
struct sockaddr_in server,client;
s=socket(AF_INET,SOCK_STREAM,0);
if(s<0){
printf("EROARE LA CREAREA SOCKETULUI SERVER\n");
return 1;
}
memset(&server,0,sizeof(server));
server.sin_port=htons(1234);
server.sin_family=AF_INET;
server.sin_addr.s_addr=INADDR_ANY;
if(bind(s,(struct sockaddr*)&server,sizeof(server))<0){
printf("EROARE LA BIND\n");
return 1;
}
listen(s,5);
memset(&client,0,sizeof(client));
int size=sizeof(client);
uint16_t porturi[100];
int descriptori[100],ok=0;
char adr_ip[100][100];
l=0;
while(1){
        c=accept(s,(struct sockaddr*) &client,&size);
        if(ok==1){signal(SIGQUIT, SIG_IGN);kill(0,SIGQUIT);}
        printf("S-a connectat un client.\n");
        descriptori[l]=c;
        porturi[l]=ntohs(client.sin_port);
        porturi[l]=htons(porturi[l]);
        strcpy(adr_ip[l],inet_ntoa(client.sin_addr));
        l++;
        if(fork()==0){
                //Pentru fiecare descriptor facem alt fork
                for(int i=0;i<l;i++)
                {int desc=descriptori[i];
                if(fork()==0){
                        //Daca primeste date le transmite la toti descriptorii (inclusiv el)
                        uint16_t sz;
                        char sir[100];
                        while(1){
                                //PRIMESTE MESAJUL
                                recv(desc,&sz,sizeof(sz),MSG_WAITALL);
                                sz=ntohs(sz);
                                recv(desc,sir,sz*sizeof(char),MSG_WAITALL);
                                sir[sz]='\0';
                                for(int j=0;j<l;j++){
                                        int de_trimis=descriptori[j];
                                        //TRIMITEM DATELE LA de_trimis
                                        //MESAJUL:
                                        sz=strlen(sir);
                                        sz=htons(sz);
                                        send(de_trimis,&sz,sizeof(sz),0);
                                        sz=ntohs(sz);
                                        send(de_trimis,sir,sz*sizeof(char),0);
                                        //ADRESA IP:
                                        sz=strlen(adr_ip[j]);
                                        sz=htons(sz);
                                        send(de_trimis,&sz,sizeof(sz),0);
                                        sz=ntohs(sz);
                                        send(de_trimis,adr_ip[i],sz*sizeof(char),0);
                                        //PORTUL:
                                        send(de_trimis,&porturi[i],sizeof(sz),0);
                                }
                        }

                        exit(EXIT_SUCCESS);

                }
                }
                exit(EXIT_SUCCESS);
        }
        ok=1;
}
return 0;
}