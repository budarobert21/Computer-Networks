/*Un client trimite unui server doua numere. Serverul va returna clientului suma celor doua numere.*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <string.h>
#include <sys/wait.h>

#include <sys/types.h>      
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main(){
        int s;
        struct sockaddr_in server_addr, client_addr;

        //socket
        s= socket(AF_INET, SOCK_DGRAM, 0);
        if(s<0){
                perror("Error on socket!\n");
                return 1;
        }

        //bind
        server_addr.sin_family= AF_INET;
        server_addr.sin_port= htons(1234);
        server_addr.sin_addr.s_addr= inet_addr("127.0.0.1");

        if(bind(s, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0){
                perror("Error on bind!\n");
                return 1;
        }

        int a,b,z;
        z= sizeof(client_addr);

        while(1){
                int conn;
                recvfrom(s, &conn, sizeof(int), MSG_WAITALL, (struct sockaddr*)&client_addr, &z);
                conn= ntohl(conn);

                printf("[%s : %d]\n", inet_ntoa(server_addr.sin_addr), htons(server_addr.sin_port));
                printf("Am primit de la %s : %d nr. %d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port), conn);

                if(fork()==0){

                        srand(time(NULL));
                        int port= 1235+random()%100;
                        printf("Am generat port: %d\n", port);

                        int s1;
                        struct sockaddr_in server1_addr;
                        s1= socket(AF_INET, SOCK_DGRAM, 0);
                        if(s1<0){
                                perror("Erroare la socket!\n");
                                return 1;
                        }

                        //bind pe noul port
                        memset(&server1_addr, 0, sizeof(server1_addr));
                        server1_addr.sin_family= AF_INET;
                        server1_addr.sin_port= htons(port);
                        server1_addr.sin_addr.s_addr= inet_addr("127.0.0.1");

                        if(bind(s1, (struct sockaddr *)&server1_addr, sizeof(server1_addr)) < 0){
                                perror("Error on bind!\n");
                                return 1;
                        }

                        //trimit noul port la client
                        port= htons(port);
                        sendto(s, &port, sizeof(int), 0, (struct sockaddr*)&client_addr, sizeof(client_addr));
                        //port= ntohs(port); //!!!!!

                        //recvfrom(s, unde, cat, 0, struct adresa client, &l);
                        recvfrom(s1, &a, sizeof(int), MSG_WAITALL, (struct sockaddr *)&client_addr, &z);
                        a= ntohl(a);
                        printf("Current server [%s : %d]\n", inet_ntoa(server1_addr.sin_addr), htons(server1_addr.sin_port));
                        printf("Am primit de la %s : %d nr. %d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port), a);

                        recvfrom(s1, &b, sizeof(int), MSG_WAITALL, (struct sockaddr *)&client_addr, &z);
                        b= ntohl(b);
                        printf("Am primit de la %s : %d nr. %d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port), b);

                        int suma=a+b;
                        printf("Current server [%s : %d]\n", inet_ntoa(server1_addr.sin_addr), htons(server1_addr.sin_port));
                        printf("Trimit suma: %d\n", suma);
                        suma= htonl(suma);
                        sendto(s1, &suma, sizeof(int), 0, (struct sockaddr*)&client_addr, sizeof(client_addr));

                        close(s1);
                        return 0;
                }
        }
        //wait(0);
        //close
        close(s);
        return 0;
}
